Den som får knappetrykket delegerer ordre.
Alle har samme ordreliste
TCP sikrer samme data ved ordre
	Ok-> ordre sendt
	Fail-> Kast heisen av

"Kast heisen av"
	Annonser
	Redeleger ordre etter deterministiske regler

Heisenes posisjon kringkastes i 10Hz over TCP.
Hvis en heis ikke svarer -> kast heisen av
Hvis en heis ikke sender i et sekund -> kast heisen av

Ved utføring av ordre
Timeout -> kast seg selv av

Jeg er blitt kastet av
	Vent



Network IF
	If soneone doesn't ACK
		Retry?
		Network-send kill them
	TCP_send
	TCP_start_receiving
	UDP_broadcast
	UDP_start_receiving

	Peer manager
		Beacon
			loop:
				Network-broadcasts alive

		Watcher
			Share alive list
			Network-recieves alive
			loop:
				maintain list of alive peers (including self)
				if someone times out: Network-send kill them
-------------------------------------------------------------
Planner
	Share order list
	Share target
	Network-recieves orders
	Network-recieves elevator states
	Recieves local new order signals
	Recieves order request
	on new order:
		plan(orders, elevator_states) -> orders
		Network-send orders
		maintain target(orders, selfID)
		update lights
	on order delete:
		delete order
		Network-send orders
		maintain target(orders, selfID)
		update lights
	on Network-recive order:
		maintain target(orders, selfID)
		update lights
-------------------------------------------------------------
Worker
	loop:
		if target:
			move toward target
			if timeout:
				Network-send kill self
			if order in right direction:
				open/close door
				send order delete
					to Planner

Poller (part of driver)
	loop:
		get floor sensor signals
		if new readings:
			get alive-list from Watcher (shared)
			Network-send to that list
		get button signals
		sends new order to Planner

Driver
	set_motor_direction(dirn)
	set_button_lamp(button, floor, on/off)
	set_floor_indicator(floor)
	set_door_open_lamp(on/off)
	get_floor_sensor_signal()
	get_button_signal(button, floor)
Elevator

===============================================================

Packet types
============
i_am_alive			alive_ID
x_is_lost			lost_ID
order 				(responsible_ID)	FLOOR 	DIR 	new/handled
state 				sender_ID			FLOOR 	DIR

Interfaces
==========

network
-------
peer_list

channel in: send_to_peers (new_order/order_handled/state/death) (buffered)
channel out: recvd_from_peer(new_order/order_handled/state, ID) (buffered)

channel out: peer_update(lost_peer/new_peer) (buffered)

planner
-------
orders (HashMap<ID, Order_struct>)

channel in: new_order(floor, order_type) (buffered)
channel in: recvd_from_peers(new_order/order_handled/state, ID) (buffered)
channel in: set/clear_order(floor, order_type) (buffered)
channel in: command_request(current_floor, current_direction) 

channel out: command(up/down/open_doors/stop)
channel out: send_to_peers(new_order) (buffered)
channel out: new_order(floor, order_type)

driver
------
channel in: driver_command<motor_cmd/light_cmd>

channel out: new_order<Order(floor, order_type)> (buffered)
channel out: local_event<Event(floor)> (buffered)

timer
-----
channel out: local_event<Event(time)>

local elevator controller (FSM)
-------------------------------
state

channel in: command(up/down/open_doors/stop)
channel in: local_event(event) (arrived_at_floor/timer_tick)

channel out: send_to_peers(state/order_handled/death) (buffered)
channel out: command_request(current_floor, current_direction)

IP is not ID. ID=0 is self. Network module translates.